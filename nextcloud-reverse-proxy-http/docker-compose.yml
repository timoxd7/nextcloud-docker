version: '3'

services:
  # Nextcloud service
  nextcloud:
    image: nextcloud
    container_name: nextcloud
    depends_on:
      - nginx-proxy
      - db
      - redis
    volumes:
      - ${NEXTCLOUD_DATA_PATH}:/var/www/html
    environment:
      # Database Access
      - MYSQL_HOST=db
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_PASSWORD=${DATABASE_PASSWORD}

      # Redis Access
      - REDIS_HOST=redis
      - REDIS_HOST_PASSWORD=${REDIS_PASSWORD}

      # Domain for nginx and Letsencrypt
      - VIRTUAL_HOST=${NEXTCLOUD_DOMAIN}

      # Nextcloud
      - NEXTCLOUD_TRUSTED_DOMAINS=${NEXTCLOUD_DOMAIN}
      - TRUSTED_PROXIES=nginx-proxy
    networks:
      - internal_network
    restart: unless-stopped

  # Redis service
  redis:
    image: redis
    container_name: nextcloudredis
    user: "1004:1010"
    hostname: redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - ${REDIS_LOCATION}:/data
    networks:
      - internal_network
    restart: always

  # Database service
  db:
    image: mariadb:10.11
    container_name: nextclouddb
    user: "1004:1010"
    command: --transaction-isolation=READ-COMMITTED --innodb_read_only_compressed=OFF
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ${NEXTCLOUD_DB_PATH}:/var/lib/mysql
    environment:
      # Config
      - MARIADB_AUTO_UPGRADE=1
      - MYSQL_INITDB_SKIP_TZINFO=1

      # Passwords
      - MYSQL_ROOT_PASSWORD=${DATABASE_ROOT_PASSWORD}
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_PASSWORD=${DATABASE_PASSWORD}
    networks:
      - internal_network
    restart: unless-stopped

  # Nginx reverse proxy service
  nginx-proxy:
    image: jwilder/nginx-proxy:alpine
    container_name: nginx-proxy
    user: "1004:1010"
    ports:
      # HTTP Port
      - "80:80"
    networks:
      - internal_network
    volumes:
      # Socket to get events about new Containers to be proxied to
      - /var/run/docker.sock:/tmp/docker.sock:ro

      # nginx configuration
      - vhost.d:/etc/nginx/vhost.d
      - ./default.conf:/etc/nginx/vhost.d/default:rw
      - conf.d:/etc/nginx/conf.d
    environment:
      - DEFAULT_HOST=default.local
      - TRUST_DOWNSTREAM_PROXY=false
      - HTTPS_METHOD=nohttps

volumes:
  vhost.d:
  conf.d:

networks:
  internal_network:
    driver: bridge
